
#include <iostream>

#include "TSystem.h"
#include "TROOT.h"
#include "TFile.h"
#include "TTree.h"
#include "TBrowser.h"

#include "TH1D.h"
#include "TH2D.h"
#include "TCanvas.h"

TFile *FileIn;
TTree *tG4;

const Int_t     NofCryInArms = 12;
const Int_t     NofCrnCry = 4;
const Int_t     NofCrystals = 4 * NofCryInArms + NofCrnCry;

const Int_t     NofScintilators = 4;

const Int_t     NofCanvases = 6;

Int_t Ls = 0;
Int_t Rs = 1 * NofCryInArms;
Int_t Us = 2 * NofCryInArms;
Int_t Ds = 3 * NofCryInArms;
Int_t Crns = 4 * NofCryInArms;


Int_t           eventID;
Double_t        Particle;
Double_t        Kinetic_Energy;
Double_t        theta_lab;
Double_t        phi_lab;

Double_t        histInfo[NofCrystals];
Double_t        ScinInfo[NofScintilators];


// "eventID"
// "Particle"
// "Kinetic_Energy"
// "theta_lab"
// "phi_lab"

Char_t szRCry[NofCryInArms][7] = {
"R1_1_3",
"R1_2_3",
"R1_3_3",
"R2_2_5",
"R2_3_5",
"R2_4_5",
"R3_3_7",
"R3_4_7",
"R3_5_7",
"R4_3_7",
"R4_4_7",
"R4_5_7"};

Char_t szLCry[NofCryInArms][7] = {
"L1_1_3",
"L1_2_3",
"L1_3_3",
"L2_2_5",
"L2_3_5",
"L2_4_5",
"L3_3_7",
"L3_4_7",
"L3_5_7",
"L4_3_7",
"L4_4_7",
"L4_5_7"};

Char_t szUCry[NofCryInArms][7] = {
"U1_1_3",
"U1_2_3",
"U1_3_3",
"U2_2_5",
"U2_3_5",
"U2_4_5",
"U3_3_7",
"U3_4_7",
"U3_5_7",
"U4_3_7",
"U4_4_7",
"U4_5_7"};

Char_t szDCry[NofCryInArms][7] = {
"D1_1_3",
"D1_2_3",
"D1_3_3",
"D2_2_5",
"D2_3_5",
"D2_4_5",
"D3_3_7",
"D3_4_7",
"D3_5_7",
"D4_3_7",
"D4_4_7",
"D4_5_7"};

Char_t szCrnCry[NofCrnCry][7] = {"C1_1_4", "C1_2_4", "C1_3_4", "C1_4_4"};

Char_t namesOfScintilators[NofScintilators][8] = {"kE_dE_R", "kE_dE_L", "kE_dE_U", "kE_dE_D"};

Char_t namesOfCanvases[NofCanvases][55] = {"Left_detectors", "Right_detectors", "Up_detectors", "Down_detectors",
"C_detectors", "Scintilators"};

TCanvas *cMain[NofCanvases];

TH1D    *h_eventID;   
TH1D    *h_Particle;   
TH1D    *h_Kinetic_Energy;
TH1D    *h_phi_lab;
TH1D    *h_theta_lab;

TH1D    *hLYSO[NofCrystals];
TH1D    *hDESC[NofScintilators];

//=============================================================================
void HistInit(){
   gROOT->cd(); //extremely neccessary
   h_eventID = new TH1D("h_eventID",";", 1010, -10, 300);   
   h_Particle = new TH1D("h_Particle",";", 1010, -10, 300);
   h_Kinetic_Energy = new TH1D("h_Kinetic_Energy",";", 1010, -10, 300);
   h_theta_lab = new TH1D("h_theta_lab",";", 1010, -10, 300);
   h_theta_lab = new TH1D("h_phi_lab",";", 1010, -10, 300);

  for(int i = 0; i < NofCryInArms; i++) {
    hLYSO[Ls+i]   = new TH1D( Form("h_%s", szLCry[i]), ";T_d [MeV];", 1010, -10, 300);
    hLYSO[Rs+i]   = new TH1D( Form("h_%s", szRCry[i]), ";T_d [MeV];", 1010, -10, 300);
    hLYSO[Us+i]   = new TH1D( Form("h_%s", szUCry[i]), ";T_d [MeV];", 1010, -10, 300);
    hLYSO[Ds+i]   = new TH1D( Form("h_%s", szDCry[i]), ";T_d [MeV];", 1010, -10, 300); 
  }

  for(int i = 0; i < NofScintilators; i++)
    hLYSO[Crns+i] = new TH1D( Form("h_%s", szCrnCry[i]), ";T_d [MeV];", 1010, -10, 300);

  for(int i = 0; i < NofScintilators; i++)
    hDESC[i] = new TH1D( Form("h_%s", namesOfScintilators[i]),";#Delta E [MeV];", 1010, -10, 300);
}

//=============================================================================
void DefineBranchAddress(){
  //read the Tree generated by G4
  tG4->SetBranchAddress("eventID", &eventID);
  tG4->SetBranchAddress("Particle", &Particle);
  tG4->SetBranchAddress("Kinetic_Energy", &Kinetic_Energy);
  tG4->SetBranchAddress("theta_lab", &theta_lab);
  tG4->SetBranchAddress("phi_lab", &phi_lab);

// L R U D
  for(int i = 0; i < NofCryInArms; i++) {
    
    tG4->SetBranchAddress(szLCry[i], &histInfo[Ls+i]);
    tG4->SetBranchAddress(szRCry[i], &histInfo[Rs+i]);
    tG4->SetBranchAddress(szUCry[i], &histInfo[Us+i]);
    tG4->SetBranchAddress(szDCry[i], &histInfo[Ds+i]);
  }
   
// corners
  for(int i = 0; i < NofCrnCry; i++)
    tG4->SetBranchAddress(szCrnCry[i], &histInfo[Crns+i]);

  for(int i = 0; i < NofScintilators; i++)
    tG4->SetBranchAddress(namesOfScintilators[i], &ScinInfo[i]);
}

//=============================================================================
void Init() {
  tG4 = (TTree*) FileIn->Get("hits");
  
  DefineBranchAddress();

  HistInit();
}

//=============================================================================
void ReadTree(){
  //read all entries and fill the histograms
  Long64_t nentries = tG4->GetEntries();

  for (int i=0;i<nentries;i++) {
    tG4->GetEntry(i);

    for (int j = 0; j < NofCrystals; j++)
      hLYSO[j]->Fill( histInfo[j] );

    for(int j = 0; j < NofScintilators; j++)
      hDESC[j]->Fill(ScinInfo[j]);
  }
  
  FileIn->Close();
}


//=============================================================================
void DrawAll() {
  
  for(int i = 0; i < NofCanvases; i++){
    cMain[i] = new TCanvas(namesOfCanvases[i], namesOfCanvases[i], 0, 0, 1000, 1000);
    if(i < 4) cMain[i]->Divide(4,3);
    else cMain[i]->Divide(4,1);
  }

  for(int i = 0; i < NofCryInArms; i++){

    cMain[0]->cd(i+1);
    cMain[0]->GetPad(i+1)->SetLogy();
    hLYSO[Ls+i]->Draw();

    cMain[1]->cd(i+1);
    cMain[1]->GetPad(i+1)->SetLogy();
    hLYSO[Rs+i]->Draw();

    cMain[2]->cd(i+1);
    cMain[2]->GetPad(i+1)->SetLogy();
    hLYSO[Us+i]->Draw();

    cMain[3]->cd(i+1);
    cMain[3]->GetPad(i+1)->SetLogy();
    hLYSO[Ds+i]->Draw();
  }

  for(int i = 0; i < NofCrnCry; i++){
    cMain[4]->cd(i+1);
    cMain[4]->GetPad(i+1)->SetLogy();
    hLYSO[Crns+i]->Draw();
  }

  for(int i = 0; i < NofScintilators; i++){
    cMain[5]->cd(i+1);
    cMain[5]->GetPad(i+1)->SetLogy();
    hDESC[i]->Draw();
  }
}

//=============================================================================
// void SaveHist(){
//   for(int i = 0; i < NofCrystals; i++)
//     if(namesOfBranch[i] == "L1_2_3" || namesOfBranch[i] == "L3_4_7")
//       hLYSO[i]->SaveAs("../output/h_" + namesOfBranch[i] + ".root");
// //  for(int i = 0; i < NofScintilators; i++)
//   //  hDESC[i]->SaveAs("../output/h_" + namesOfScintilators[i] + ".root");
// }

//=============================================================================
//=============================================================================
void analyse(const Char_t szFileName[]="alltogether.root") {
  FileIn = new TFile(szFileName);
  if(!FileIn->IsOpen()) gSystem->Exit(1);

  tG4 = (TTree*) FileIn->Get("hits");

  Init();
  ReadTree();
  DrawAll();
  //SaveHist();
}
